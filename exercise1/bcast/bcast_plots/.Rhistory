# Set working directory as this directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load the dataset from the datasets/ folder
bank <- read.csv("../datasets/BankChurners.csv", sep = ",")
# Set working directory as this directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd
getwd()
clear
# Load the dataset from the datasets/ folder
bank <- read.csv("../datasets/BankChurners.csv", sep = ",")
# Load the dataset from the datasets/ folder
bank <- read.csv("../datasets/BankChurners.csv", sep = ",")
# ⚠️ Remove the last two columns as suggested in the README
bank <- bank[, -c(22, 23)]
# View the dataset
View(bank)
# Summary
summary(bank)
# Structure
str(bank)
# Total number of NA
sum(is.na(bank))
clear
dbinom(5,5,3/4)
1-0.23
clear
pbinom(1,5,1/4,lower.tail = F)
pbinom(0,5,1/4,lower.tail = F)
1-0.75^5
pt(q = 2.16,df=19)
1-pt(q = 2.16,df=19)
2*(1-pt(q = 2.16,df=19))
# NOT RUN {
# 2-dimensional example
# loading data
data(hacide)
library(ROSE)
install.packages("ROSE")
clear
library(ROSE)
# NOT RUN {
# 2-dimensional example
# loading data
data(hacide)
# imbalance on training set
table(hacide.train$cls)
#imbalance on test set
table(hacide.test$cls)
# plot unbalanced data highlighting the majority and
# minority class examples.
par(mfrow=c(1,2))
plot(hacide.train[, 2:3], main="Unbalanced data", xlim=c(-4,4),
ylim=c(-4,4), col=as.numeric(hacide.train$cls), pch=20)
legend("topleft", c("Majority class","Minority class"), pch=20, col=1:2)
# model estimation using logistic regression
fit <- glm(cls~., data=hacide.train, family="binomial")
# prediction using test set
pred <- predict(fit, newdata=hacide.test)
roc.curve(hacide.test$cls, pred,
main="ROC curve \n (Half circle depleted data)")
# generating data according to ROSE: p=0.5 as default
data.rose <- ROSE(cls~., data=hacide.train, seed=3)$data
table(data.rose$cls)
View(hacide.train)
View(data.rose)
par(mfrow=c(1,2))
# plot new data generated by ROSE highlighting the
# majority and minority class examples.
plot(data.rose[, 2:3], main="Balanced data by ROSE",
xlim=c(-6,6), ylim=c(-6,6), col=as.numeric(data.rose$cls), pch=20)
legend("topleft", c("Majority class","Minority class"), pch=20, col=1:2)
legend("topleft", c("Majority class","Minority class"), pch=20, col=1:2)
fit.rose <- glm(cls~., data=data.rose, family="binomial")
pred.rose <- predict(fit.rose, data=data.rose, type="response")
roc.curve(data.rose$cls, pred.rose,
main="ROC curve \n (Half circle depleted data balanced by ROSE)")
par(mfrow=c(1,1))
fit.rose <- glm(cls~., data=data.rose, family="binomial")
pred.rose <- predict(fit.rose, data=newdata=hacide.test, type="response")
roc.curve(data.rose$cls, pred.rose,
main="ROC curve \n (Half circle depleted data balanced by ROSE)")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
roc.curve(hacide.test$cls, pred,
main="ROC curve \n (Half circle depleted data)")
roc.curve(data.rose$cls, pred.rose,
main="ROC curve \n (Half circle depleted data balanced by ROSE)")
par(mfrow=c(1,3))
roc.curve(hacide.test$cls, pred,
main="ROC curve \n (Half circle depleted data)")
roc.curve(data.rose$cls, pred.rose,
main="ROC curve \n (Half circle depleted data balanced by ROSE)")
test.rose <- ROSE(cls~., data=hacide.test, seed=3)$data
pred.rose2 <- predict(fit.rose, data=newdata=test.rose, type="response")
roc.curve(data.rose$cls, pred.rose2,
main="ROC curve \n (Half circle depleted data balanced by ROSE)")
pred.rose2 <- predict(fit.rose, data=newdata=test.rose, type="response")
pred.rose2 <- predict(fit.rose, newdata=test.rose, type="response")
roc.curve(data.rose$cls, pred.rose2,
main="ROC curve \n (Half circle depleted data balanced by ROSE)")
pred.rose2 <- predict(fit.rose, newdata=test.rose, type="response")
View(hacide.test)
roc.curve(test.rose$cls, pred.rose2,
main="ROC curve \n (Half circle depleted data balanced by ROSE)")
library(ggplot2)
bcast_standard_df<- read.csv("../bcast_standard/bcast_standard.csv")
setwd("~/Desktop/HPC_FinalProject/exercise1/bcast/bcast_plots")
library(ggplot2)
bcast_standard_df<- read.csv("../bcast_standard/bcast_standard.csv")
bcast_standard_df<- read.csv("../bcast_results/bcast_standard.csv")
bcast_chain_df<- read.csv("../bcast_results/bcast_chain.csv")
bcast_binarytree_df<- read.csv("../bcast_results/bcast_binarytree.csv")
bcast_df<- rbind(bcast_standard_df,bcast_chain_df,bcast_binarytree_df)
View(bcast_df)
ggplot(data=bcast_df,aes(x=Processes,y=AvgLatency.us.,group=Algorithm))+
geom_line(aes(color=Algorithm))
ggplot(data=bcast_df,aes(x=Processes,y=AvgLatency.us.,group=Algorithm))+
geom_line(aes(color=Algorithm))+
geom_point(aes(color=Algorithm))+
ggplot(data=bcast_df,aes(x=Processes,y=AvgLatency.us.,group=Algorithm))+
geom_line(aes(color=Algorithm))+
geom_point(aes(color=Algorithm))
ggplot(data=bcast_df,aes(x=Processes,y=AvgLatency.us.,group=Algorithm))+
geom_line(aes(color=Algorithm))+
geom_point(aes(color=Algorithm))
ggplot(data=bcast_df,aes(x=Processes,y=AvgLatency.us.,group=Algorithm))+
geom_line(aes(color=Algorithm))+
geom_point(aes(color=Algorithm))+
ylim(c(0,60))
ggplot(data=bcast_df,aes(x=Processes,y=AvgLatency.us.,group=Algorithm))+
#geom_line(aes(color=Algorithm))+
geom_point(aes(color=Algorithm))+
ylim(c(0,60))
ggplot(data=bcast_df,aes(x=Processes,y=AvgLatency.us.,group=Algorithm))+
geom_line(aes(color=Algorithm))+
#geom_point(aes(color=Algorithm))+
ylim(c(0,60))
